apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.example.quickdevelop"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        ndk {
            // 设置支持的SO库架构
//            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi-v7a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
    }

    //ndk
    packagingOptions {
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }

    signingConfigs {
        release {
            storeFile file("./rwdKey.jks")
            storePassword 'rwd123'
            keyAlias 'key0'
            keyPassword 'rwd123'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
//            //混淆
//            minifyEnabled true
//            //Zipalign优化
//            zipAlignEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release

        }
        debug {
//            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆
//            minifyEnabled false
//            //Zipalign优化
//            zipAlignEnabled false
//            // 移除无用的resource文件
//            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "quickDevolop${defaultConfig.versionName}-${buildTime()}.apk"
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    //开启Java1.8 能够使用lambda表达式
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion = '28.0.3'
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    androidExtensions {
        experimental = true
    }

}

def buildTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getDefault())
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    api (name: 'LiteAVSDK_Player_6.5.7272', ext: 'aar')

    implementation supportLibs
    implementations.each { k, v ->
        implementation(v) {
            //去除第三方的重复support库
            exclude group: 'com.android.support'
        }
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    annotationProcessor 'androidx.annotation:annotation:1.0.0'
}
